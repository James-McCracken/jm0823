/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package interview;

import java.util.Set;
import java.util.stream.Collectors;
import java.time.temporal.ChronoUnit;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class App 
{
    public static void main(String[] args) 
    {
        UserInput userInput = new UserInput(System.in, System.out);
        //Get user input
        Tool tool = userInput.getToolForRental();
        
        LocalDate start_date = userInput.getStartDate();
         if (start_date == null) 
        {
            System.exit(0);
        }

        int rentalDays = userInput.getRentalDays();
        if (rentalDays == -1 ) 
        {
            System.exit(0);
        }
        int discount = userInput.getDiscount();

        if (discount == -1) 
        {
            System.exit(0);
        }

        int days_charged = daysCharged(start_date, rentalDays, tool);
        double initial_cost = calculateInitialCost(days_charged, tool);
        double final_price = applyDiscount(initial_cost, discount);

        generateRentalAgreement(tool, start_date, rentalDays, days_charged, 
            discount, initial_cost, final_price);
    }

    static double calculateInitialCost(int number_days_charged,Tool tool)
    {
        double init_cost = Math.round(
            (number_days_charged * tool.getToolType().getDailyCharge()) * 100.0) / 100.0;
        return init_cost;
    }

    static double applyDiscount(double initial_price, int discount)
    {   
        double discounted_cost = Math.round((((100-discount)*initial_price / 100)) * 100.0) / 100.0;
        return discounted_cost;
    }

    //static int daysCharged(Tool tool)
    static int daysCharged(LocalDate start_date, int rentalDays, Tool tool)
    {
        final Set<DayOfWeek> weekends = Set.of(DayOfWeek.SUNDAY, DayOfWeek.SATURDAY);

        //note that 1 day is added as the set of days is (] so the sast day has to be included
        LocalDate end_date = start_date.plusDays(rentalDays - 1);

        long number_of_weekend_days = start_date.datesUntil(end_date.plusDays(1)).filter(
            t -> weekends.contains(t.getDayOfWeek())).collect(Collectors.toList()).size(); 
        
        long number_of_weekdays = rentalDays - number_of_weekend_days;

        int total_days_charged = 0;
        //check weekday charge (bool)
        if (tool.getToolType().getWeekdayCharge())
        {
            total_days_charged += number_of_weekdays;
        }

        //check weekend (bool)
        if (tool.getToolType().getWeekendCharge())
        {
            total_days_charged += number_of_weekend_days;
        }

        //check holiday (bool)
        if (!tool.getToolType().getWeekholidayCharge())
        {
            //if no holiday charge but rented time contains it, 
            //subtract a day for each holiday applied since that holiday is not free
            for (int i = 0; i <= ChronoUnit.YEARS.between(start_date, end_date); ++i)
            {
                //4th of July (if Saturday then Friday before, if Sunday, then Monday after)
                LocalDate fouth_of_july = LocalDate.of(start_date.getYear() + i, 7, 4);
                //4th is Saturday and rented though the friday before
                if(fouth_of_july.getDayOfWeek() == DayOfWeek.SATURDAY)
                {
                    if(fouth_of_july.minusDays(1).isAfter(start_date.minusDays(1)) && 
                        fouth_of_july.isBefore(end_date.plusDays(1)))
                    {
                        total_days_charged--;
                    }
                }
                //4th is sunday and rented though the monday
                else if(fouth_of_july.getDayOfWeek() == DayOfWeek.SUNDAY)
                {
                    if(fouth_of_july.plusDays(1).isAfter(start_date.minusDays(1)) && 
                        fouth_of_july.isBefore(end_date.plusDays(1)))
                    {
                        total_days_charged--;
                    }
                }
                //4th is a weekday within the rental period
                else
                {
                    if(fouth_of_july.isAfter(start_date.minusDays(1)) && 
                        fouth_of_july.isBefore(end_date.plusDays(1)))
                    {
                        total_days_charged--;
                    }
                }

                //Labor Day (first Monday in September)
                LocalDate laborDay = LocalDate.of(start_date.getYear() + i, 9, 1)
                    .with(java.time.temporal.TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));

                if(laborDay.isAfter(start_date.minusDays(1)) && laborDay.isBefore(end_date.plusDays(1)))
                {
                    total_days_charged--;
                }
            }
        }
        return total_days_charged;
    }

    static void generateRentalAgreement(Tool tool, LocalDate start_date, int rental_days, 
        int number_days_charged, int discountGiven, double initial_cost, double final_price)
    {
        DateTimeFormatter formatters = DateTimeFormatter.ofPattern("MM/dd/yy");
        System.out.println("Generating Rental Agreement: ");
        System.out.println("----------------------------------------------------");
        // ● Tool code - Specified at checkout
        System.out.println(String.format("Tool code: %s", tool.getToolCode()));
        // ● Tool type - From tool info
        System.out.println(String.format("Tool Type: %s", tool.getToolType().getToolName()));
        // ● Tool brand - From tool info
        System.out.println(String.format("Tool Brand: %s", tool.getToolBrandNname()));
        // ● Rental days - Specified at checkout
        System.out.println(String.format("Rental days: %d", rental_days));
        // ● Check out date - Specified at checkout
        System.out.println(String.format("Checkout date: %s", start_date.format(formatters)));
        // ● Due date - Calculated from checkout date and rental days.
        System.out.println(String.format("Due date: %s", start_date.plusDays(rental_days).format(formatters)));
        // ● Daily rental charge - Amount per day, specified by the tool type.
        System.out.println(String.format("Daily Rental Charge: $%.2f", tool.getToolType().getDailyCharge()));
        // ● Charge days - Count of chargeable days, from day after checkout through and including due
        // date, excluding “no charge” days as specified by the tool type.
        System.out.println(String.format("Number of days Charged: %d", number_days_charged));
        // ● Pre-discount charge - Calculated as charge days X daily charge. Resulting total rounded half up
        // to cents.
        System.out.println(String.format("Initial charge: $%.2f", initial_cost));
        // ● Discount percent - Specified at checkout.
        System.out.println(String.format("Discount Percentage: %d", discountGiven)+"%");
        // ● Discount amount - calculated from discount % and pre-discount charge. Resulting amount
        // rounded half up to cents.
        System.out.println(String.format("Discount amount: $%.2f", (initial_cost - final_price)));
        // ● Final charge - Calculated as pre-discount charge - discount amount.
        System.out.println(String.format("Final Charge: $%.2f", final_price));
    }
}